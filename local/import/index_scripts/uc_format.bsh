import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Subfield;
import org.marc4j.marc.VariableField;

//import java.lang.Object

/*
 * Determine Record Format(s)
 *
	 * @param  Record          record
	 * @return Set     format of record
 */
public Set getFormat(Record record)
{
    Set result = new LinkedHashSet();
    String leader = record.getLeader().toString();
    char leaderBit;
    ControlField fixedField = (ControlField) record.getVariableField("008");
    List items  = record.getVariableFields("099");
    List df856List  = record.getVariableFields("856");  
    List df300List  = record.getVariableFields("300");
    List df336List  = record.getVariableFields("336");
    List df337List  = record.getVariableFields("337"); 
    List df338List  = record.getVariableFields("338"); 
    List df344List  = record.getVariableFields("344"); 
    List df347List  = record.getVariableFields("347"); 
    List df502List  = record.getVariableFields("502"); 
    List df538List  = record.getVariableFields("538"); 
    List df903List  = record.getVariableFields("903");
    List df099List  = record.getVariableFields("099");
    
    
    String formatString;
    char formatCode = ' ';
    char formatCode1 = ' ';
    char beginPrefix = '\u0018';
    char endPrefix = '\u0019';
    
    // marc4j documentation: 
    //   http://marc4j.tigris.org/doc/apidoc/help-doc.html
    //   http://marc4j.tigris.org/doc/apidoc/index.html
    
    
    // 099 $b is the prefix, which is separate in OLE. It has been moved from 099 field #0018 #0019 control field to 099$b just in OLE records 
    Iterator iter = df099List.iterator();
    {
    	    DataField fld099;
    	    while (iter.hasNext())
    	    {
    	    	    fld099 = (DataField) iter.next();
    	    	        	    	   
    	    	    if(fld099.getSubfield('b') != null) 
    	    	    {
    	    	    	    String str = fld099.getSubfield('b').getData();
    	    	    	   
                   		if (str.equals("DVD"))
                   	    	{
                   	    		result.add("DVD");
                   	    		result.add("Video");
                   	    	}
                   	    	if (str.equals("VidCass"))
                  		{
                   	    		result.add("tapeVideo");
                   	    		result.add("Video");
              	    		}
                   	    	if (str.equals("LasDisc"))
                      		{
                        		result.add("LaserDisc");
                        		result.add("Video");
                       		}
                        	if (str.equals("AudCD"))
                       		{
                        		result.add("CD");  
                        		result.add("Audio");
                        	}
                        	if (str.equals("AudDisc"))
                        	{
                        		result.add("Phonograph");
                        		result.add("Audio");
                       		}
                        	if (str.equals("AudCass"))
                       		{
                        		result.add("AudioCass");
                        		result.add("Audio");
                       		}
                               if (str.contains("micro"))
                  	        {
                   	    	      result.add("Microform");
                   	    	}     
              	       	  
    	    	    }
    	    }
    }

    //in field 856, check for non filling indicator 1 to be equal 4 and non filling indicator 2 to be equal 0 or 1
   DataField fld856 = (DataField) record.getVariableField("856");
   if (fld856 != null)
   {
        char ind1 = fld856.getIndicator1(); 
        char ind2 = fld856.getIndicator2();
       
        if ( ind1 == '4' && ind2 == '0' || ind2 == '1')
        {
            result.add("Eresource");	   
        }
   }

    Iterator iter = df300List.iterator();
    {
    	    DataField fld300;
    	    while (iter.hasNext())
    	    {
    	    	    fld300 = (DataField) iter.next();
    	    	   
    	    	    if(fld300.getSubfield('b') != null) 
    	    	    {
    	    	    	   if ( fld300.getSubfield('b').getData().contains("33 1/3"))
    	    	    	   {
    	    	    	        result.add("Phonograph");      // $
    	    	    	        result.add("Audio");
    	    	    	   }
    	    	    }
    	    }
    }


    Iterator iter = df336List.iterator();
    {
    	    DataField fld336;
    	    while (iter.hasNext())
    	    {
    	    	    fld336 = (DataField) iter.next();
    	    	   
    	    	    if(fld336.getSubfield('a') != null) 
    	    	    {
     			   String str = fld336.getSubfield('a').getData();

    	    	    	   if ( str.contains("cartographic"))
    	    	    	   {
    	    	    	        result.add("Map");      // $
    	    	    	   }
		           if ( str.contains("notated music"))
    	    	    	   {
    	    	    	        result.add("SheetMusic");  // $   // Music Score
    	    	    	   }
                           if ( str.contains("spoken word"))
    	    	    	   {
                                result.add("Spoken"); //Spoken word Recording  // $
                                result.add("Audio");
                           }
                           if ( str.contains("two-dimensional moving image"))
    	    	    	   {
                                result.add("Video");   // $
 			   }
    	    	    }
    	    }
    }


    Iterator iter = df337List.iterator();
    {
    	    DataField fld337;
    	    while (iter.hasNext())
    	    {
    	    	    fld337 = (DataField) iter.next();
    	    	   
    	    	    if(fld337.getSubfield('a') != null) 
    	    	    {
    	    	    	   if ( fld337.getSubfield('a').getData().contains("microform"))
    	    	    	   {
    	    	    	        result.add("Microform");      // $
    	    	    	   }
    	    	    }
    	    }
    }
    



    Iterator iter = df338List.iterator();
    {
    	    DataField fld338;
    	    while (iter.hasNext())
    	    {
    	    	    fld338 = (DataField) iter.next();
    	    	   
    	    	    if(fld338.getSubfield('a') != null)         
    	    	    {

                          String str = fld338.getSubfield('a').getData();
    	    	    	   if ( str.contains("audiocassette"))
    	    	    	   {
    	    	    	        result.add("AudioCass");    // $
    	    	    	        result.add("Audio");
    	    	    	   }
                  	  if ( str.contains("videocassette")) 
                          {
                   	    		result.add("tapeVideo");   //$
                   	    		result.add("Video");
              	       	  }
    	    	    }
    	    }
    }

    
    
    
    
    Iterator iter = df344List.iterator();
    {
    	    DataField fld344;
    	    while (iter.hasNext())
    	    {
    	    	    fld344 = (DataField) iter.next();
    	    	    {
    	    	    	    if(fld344.getSubfield('c') != null) 
    	    	    	    {
                                    String str = fld344.getSubfield('c').getData();
    	    	    	    	    if ( str.contains("33 1/3 rpm"))
    	    	    	    	    {
    	    	    	    	    	    result.add("Phonograph");  // $
    	    	    	    	    	    result.add("Audio");
    	    	    	    	    }
    	                            if ( str.contains("1.4 m/s"))
                                    {
                                        result.add("CD");   // audioCD   // $ 
                                        result.add("Audio");
                                    }
    	    	             }
    	             }
            }
    } 
     
    
     
     
    Iterator iter = df347List.iterator();
    {
    	    DataField fld347;
    	    while (iter.hasNext())
    	    {
    	    	    fld347 = (DataField) iter.next();
    	    	    {
    	    	    	    if(fld347.getSubfield('b') != null) 
    	    	    	    {
                                  String str = fld347.getSubfield('b').getData();
    	    	    	    	    if ( str.contains("Blu-ray"))
    	    	    	    	    {
    	    	    	    	    	    result.add("Bluray");            // $
    	    	    	    	    	    result.add("Video");
    	    	    	    	    }
    	    	    	    	    if ( str.contains("DVD video"))
    	    	    	    	    {
    	    	    	    	    	    result.add("DVD");            // $
    	    	    	    	    	    result.add("Video");
    	    	    	    	    }
                       	    	    if ( str.contains("CD audio"))
                                    {
                                        result.add("CD");   // audioCD   // *             
                                        result.add("Audio");
                                    }
 
                             }	 	 
    	    	    }
    	    }
     }



    Iterator iter = df538List.iterator();
    {
    	    DataField fld538;
    	    while (iter.hasNext())
    	    {
    	    	    fld538 = (DataField) iter.next();
    	    	    {
    	    	    	    if(fld538.getSubfield('a') != null) 
    	    	    	    {
                                  String str = fld538.getSubfield('a').getData();

    	    	    	    	    if ( str.contains("Blu-ray"))
    	    	    	    	    {
    	    	    	    	    	    result.add("Bluray");        //$
    	    	    	    	    	    result.add("Video");
    	    	    	    	    }
    	    	    	    	    if ( str.contains("DVD"))
    	    	    	    	    {
    	    	    	    	    	    result.add("DVD");            // $
    	    	    	    	    	    result.add("Video");
    	    	    	    	    }
    	    	    	    	    if ( str.contains("Laserdisc"))
    	    	    	    	    {
    	    	    	        	  result.add("LaserDisc");            // $
    	    	    	    	    	  result.add("Video");
    	    	    	    	    }

    	    	    	    }
    	    	    }
    	    }
     }
     
     
    
    Iterator iter = df502List.iterator();
    {
    	    DataField fld502;
    	    if (iter.hasNext())
    	    {
    	    	    result.add("Dissertations");
    	    }
    }
    
    Iterator iter = df903List.iterator();
    {
            DataField fld903;
            while (iter.hasNext())
            {
                    fld903 = (DataField) iter.next();

                    if(fld903.getSubfield('a') != null)
                    {
                           if ( fld903.getSubfield('a').getData().contains("Hathi"))
                           {
                                result.add("Eresource");
                           }
                    }
            }
    }
 
    	    
    for (DataField item : items) 
    {
    	    
    	   
   	if (item != null) 
   	{
   	     // 1. item.getSubfield returns a Subfield object,
   	     Subfield a = item.getSubfield('a');
 		
	        if( a != null)
	        {
	  
		
	        	// 2. Subfield.getData() returns a String
	        	String callNo = a.getData();		 
	
	        	// 3. Check the String for 0x18. 
	        	//    Use String methods to search for 0x18. Try "indexOf" method.
	        	int prefixStartIdx = callNo.indexOf(beginPrefix);
	        	int prefixEndIdx = callNo.indexOf(endPrefix);

	        	String startStr = "<U+0018>";
	        	String endStr = "<U+0019>";

	             	if (prefixStartIdx == -1)
	             	{
	             		if (callNo.startsWith(startStr))
	             		{
	             			prefixStartIdx = startStr.length() -1;
	             			prefixEndIdx = callNo.indexOf(endStr);
	             		}
	             	}
                       	
                       	// 4. If there's a 0x18, then get the substring between 0x18 and 0x19
                       	//    Check String methods, subsequence? substring?
                       	if (prefixStartIdx >= 0  || callNo.startsWith(startStr))
                       		
                   	{
                   		String prefixes = callNo.substring(prefixStartIdx+1, prefixEndIdx);

                   		if (prefixes.equals("DVD"))
                   	    	{
                   	    		result.add("DVD");
                   	    		result.add("Video");
                   	    	}
                   	    	if (prefixes.equals("VidCass"))
                  		{
                   	    		result.add("tapeVideo");
                   	    		result.add("Video");
              	    		}
                   	    	if (prefixes.equals("LasDisc"))
                      		{
                        		result.add("LaserDisc");
                        		result.add("Video");
                       		}
                        	if (prefixes.equals("AudCD"))
                       		{
                        		result.add("CD");  
                        		result.add("Audio");
                        	}
                        	if (prefixes.equals("AudDisc"))
                        	{
                        		result.add("Phonograph");
                        		result.add("Audio");
                       		}
                        	if (prefixes.equals("AudCass"))
                       		{
                        		result.add("AudioCass");
                        		result.add("Audio");
                       		}
                               if (prefixes.contains("micro"))
                  	        {
                   	    	      result.add("Microform");
                   	    	}              	    		

                       	}	
    	         }
    	            // Collection codes for mircoforms
    	         Subfield c = item.getSubfield('c');
    	         if(c != null)
    	         {
    	              String subC = c.getData();
    	      
    	              if(subC.equals("LawMic") || subC.equals("Mic") || subC.equals("MidEMic") || subC.equals("SciMic")
    	         	 || subC.equals("SMicDDC") || subC.equals("SMicDoc") || subC.equals("WSciMic"))
    	              {
    	         	   result.add("Microform");   	         	 
    	              }   
    	         }     

          }
   }



     // check the 006 - this is a repeating field

    List fields = record.getVariableFields("006");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) 
    	{
        ControlField formatField;
        while(fieldsIter.hasNext()) 
            {
            formatField = (ControlField) fieldsIter.next();
            formatString = formatField.getData().toUpperCase();
            formatCode  = formatString.length() > 0 ? formatString.charAt(0) : ' ';    //@ 0
            formatCode3 = formatString.length() > 3 ? formatString.charAt(3) : ' ';    //@ 3
            formatCode4 = formatString.length() > 4 ? formatString.charAt(4) : ' ';    //@ 4
            formatCode6 = formatString.length() > 6 ? formatString.charAt(6) : ' ';    //@ 6
            formatCode12 = formatString.length() > 12 ? formatString.charAt(12) : ' ';    //@ 12
            formatCode16 = formatString.length() > 16 ? formatString.charAt(16) : ' ';    //@ 16
            
	    switch (formatCode) 
	    { 
            case 'M':
	    case 'C':
	    case 'D':
	    case 'J':
	    case 'A':
	    case 'P':
	    case 'S':
	    case 'T':
	    	   
		      switch(formatCode6)
	    	    	{
                              case 'A':
	       	              case 'B':
		              case 'C':
                                  result.add("Microform");  // $
                                  break;
                        }
                   break; 
            case 'C':
	    case 'D':
               result.add("SheetMusic");  // $
               break;

            case 'J':
		
               result.add("Music");    //Music recording  // $                                   
               result.add("Audio");   
               break;

            case 'I':	    
	   
                     result.add("Spoken"); //Spoken word Recording  // $
                     result.add("Audio");
                 break;

            case 'E':
            case 'F':
                result.add("Map");  // $
                break;
 
	    case 'E':
	    case 'F':
	    case 'G':
	    case 'K':
		{
	    	    switch(formatCode12)
	    	    {

                       case 'A':
	       	       case 'B':
		       case 'C':
                           result.add("Microform");  // $
                           break;  
                    }
		    break;
		}

	    case 'K':
                   result.add("Image"); //$
                   break;
       
	    case 'G':
	    	    switch(formatCode16)
	    	    {
	    	    	case 'F':
	    	    	case 'S':
	    	    	case 'T':
	    	    	    result.add("Image");  // $
                            break;
                    }
                      break;
             case 'O':
                 result.add("Kit");   //$
                 break;
           
            }
	}
    }




    // check the 007 - this is a repeating field
    List fields = record.getVariableFields("007");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) 
    	{
        ControlField formatField;
        while(fieldsIter.hasNext()) 
            {
            formatField = (ControlField) fieldsIter.next();
            formatString = formatField.getData().toUpperCase();
            formatCode  = formatString.length() > 0 ? formatString.charAt(0) : ' ';     //@ 0
            formatCode1 = formatString.length() > 1 ? formatString.charAt(1) : ' ';    //@ 1
            formatCode3 = formatString.length() > 3 ? formatString.charAt(3) : ' ';    //@ 3
            formatCode4 = formatString.length() > 4 ? formatString.charAt(4) : ' ';    //@ 4
            
	    switch (formatCode) 
	    {
		case 'A':
                    switch(formatCode1) 
                    {
                    	case 'D':
                    	    result.add("Book");  // $
                    	    break;
		    }
                  break;
 
               case 'H':
                   result.add("Microform"); //$
                   break;

               case 'A':
	       case 'D':
                   result.add("Map");  // $
                   break;

                case 'G':
                case 'K': 
                    result.add("Image");  // $

	         case 'S':      
                    switch(formatCode1) 
                    {
                        case 'S': 	
                            result.add("AudioCass");  // $
                            break;
                    }
                    switch(formatCode3) 
                    {
		       case 'B':
                           result.add("Phonograph");  // LP   //$
                           break;

                    	case 'F':    
                    	    result.add("CD");   // audioCD   // $
			    break;
                     }
                    break;  
                case 'V':
                    switch(formatCode1) 
                    {         
                       case 'F':
	                    result.add("tapeVideo"); //videoCassette  // $
	                    result.add("Video");
			    break;
                      
		    }
                    switch(formatCode4) 
                    {
                        case 'G':
			    result.add("LaserDisc");  // $
			    result.add("Video");
			    break;
			
                        case 'V':
                            result.add("DVD");   // DVD  // $
                            result.add("Video");
                            break;
                      	  case 'S':
                    	     result.add("Bluray");  // $
                    	     result.add("Video");
			     break;
                    }
                  
		  case 'M':
                      result.add("Video");  // $ 
	              break;

                  case 'O':
                      result.add("Kit");   //$
	               break;
            }
        }

    }

    
    
     // check the 008 - this is a repeating field
    List fields = record.getVariableFields("008");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) 
    	{
        ControlField formatField;
        while(fieldsIter.hasNext()) 
            {
            formatField = (ControlField) fieldsIter.next();
            formatString = formatField.getData().toUpperCase();
           // formatCode  = formatString.length() > 0 ? formatString.charAt(0) : ' ';     //@ 0
           // formatCode1 = formatString.length() > 1 ? formatString.charAt(1) : ' ';    //@ 1
            formatCode23 = formatString.length() > 23 ? formatString.charAt(23) : ' ';    //@ 23
            formatCode29 = formatString.length() > 29 ? formatString.charAt(29) : ' ';    //@ 29
            formatCode33 = formatString.length() > 33 ? formatString.charAt(33) : ' ';    //@ 33
            formatCode17 = formatString.length() > 17 ? formatString.charAt(17) : ' ';    //@ 17
            formatCode28 = formatString.length() > 28 ? formatString.charAt(28) : ' ';    //@ 28

            if(formatCode17 == 'U' && formatCode28 == 'F')
	     {    
                               result.add("USfedGovDoc");  
			}

            switch(formatCode23)
               {
	 
                case 'D': 
                case 'F':
                case 'R':
                case ' ': 
            		CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'A' || CharAt6 == 'C' || CharAt6 == 'D' || CharAt6 == 'P' || CharAt6 == 'T')
                       result.add("Print");  // $
                       break;

                case 'D':
                case 'R':
                case ' ':
                        CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'E' || CharAt6 == 'F' || CharAt6 == 'K')
                       result.add("Print");  // $
                       break;

                case 'A':
		case 'B':
		case 'C':
            		CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'E' || CharAt6 == 'F' || CharAt6 == 'G' || CharAt6 == 'K')
                       result.add("Microform");  // $
                       break; 
                
                case 'A':
                case 'B':
                case 'C':
                        CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'A' || CharAt6 == 'C' || CharAt6 == 'D' || CharAt6 == 'M' || CharAt6 == 'P' || CharAt6 == 'S' || CharAt6 == 'T')
                       result.add("Microform");  // $
                       break;
  
	       }
               break;

            switch(formatCode33)
               {
		case 'F':
		case 'S':
		case 'T':

            		CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'G')
                       result.add("Image"); //$
                       break;

		case 'M':
		case 'V':
            		CharAt6 = Character.toUpperCase(leader.charAt(6));
                       if(CharAt6 == 'G')
                       result.add("Video"); //$
                       break;
	       }
               break;  
            }
        }
    
    

    // check the Leader at position 6
    leaderBit6 = leader.charAt(6);
    switch (Character.toUpperCase(leaderBit6)) 
    {
    	    
	case 'A':
	    formatCode = Character.toUpperCase(leader.charAt(7));
	    if (formatCode == 'A' || formatCode == 'C' || formatCode == 'D' || formatCode == 'M')
		result.add("Book");             // $                      
            if (formatCode == 'B' || formatCode == 'S')
                result.add("Journals");    // *  //Serial
            break;
        case 'C':
        case 'D':
            result.add("SheetMusic");  // $   // Music Score
            break;
        case 'E':
        case 'F':
            result.add("Map");  // $
            break;
         case 'I':
            result.add("Spoken"); //Spoken word Recording  // $
            result.add("Audio");
            break;
        case 'J':
            result.add("Music");    //Music recording  // $
            result.add("Audio");
            break;
        case 'K':
            result.add("Image");  // $
            break;
        case 'O':
            result.add("Kit");  // $
            break;
        case 'P':
            result.add("ArchivalCollections");   //Manuscripts   // $ 
            break;

          
    }
        
    // check the Leader at position 7
    leaderBit7 = leader.charAt(7);
    switch (Character.toUpperCase(leaderBit7)) 
{

	case 'B':
        case 'I':
        case 'S':
           result.add("Journals"); // Serial  // $
           break;
        
}





    // Nothing worked!
    if (result.isEmpty()) {
        result.add("Unknown");
    }
    
    return result;
}


 // For hathiTrust Files
public Set getHathiFormat (Record record)
{
	
	Set result = getFormat(record);
	// Many HathiTrust records do not have the data we use for format
	
	result.remove("Print");
	result.remove("Microform");
	result.remove("Unknown");	
	result.add("Eresource");
	return result;
}


 // For SFX Files
public Set getSFXformat (Record record)
{
	Set result = getFormat(record);
	result.add("Eresource");
	result.add("Journals");
	return result;
}
