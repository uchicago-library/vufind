<?
  // Get the template name
  $templateName = $this->layout()->templateName;
  $isSearchResults = ($templateName == 'results');

  // Give special consideration to search results pages
  if ($isSearchResults) {
    $lookfor = $this->results->getUrlQuery()->isQuerySuppressed() ? '' : $this->params->getDisplayQuery();

    // Extra configurations for search results pages
    $resultsConfig = array(
      'lookfor' => $lookfor,
      'searchIndex' => $this->params->getSearchHandler(),
      'searchType' => $this->params->getSearchType(),
      'searchId' => $this->results->getSearchId(),
      'searchClassId' => $this->params->getsearchClassId(),
      'checkboxFilters' => $this->params->getCheckboxFacets(),
      'filterList' => $this->params->getFilters(),
      'hasDefaultsApplied' => $this->params->hasDefaultsApplied(),
      'selectedShards' => $this->params->getSelectedShards()
    );
  }

  $searchConfig = isset($resultsConfig) ? $resultsConfig : array();

  // Get the current search context and build the proper searchbox
  $searchContext = $this->SearchContext()->getCurrentContext();
  switch ($searchContext) {
    case ($searchContext == 'alphabrowse'):
        // Set up the browse box:
        $this->alphaBrowseTypes = $this->GetConfig()->getAlphabrowseSearchTypes();
        $this->layout()->searchbox = $this->context($this)->renderInContext('alphabrowse/alphabrowseMini.phtml', array('searchClassId' => 'Solr'));
        break;
    default:
        // Set up search box:
        $this->layout()->searchbox = $this->context($this)->renderInContext(
            'search/searchbox.phtml',
            $searchConfig
        );
  }
?>
